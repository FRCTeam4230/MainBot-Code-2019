// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4230.MyRobot;
// package
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.SpeedControllerGroup;

// Nuematics stuff



import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;





import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import org.usfirst.frc4230.MyRobot.commands.*;
import org.usfirst.frc4230.MyRobot.subsystems.*;



// FRC Stuff

//Talaron code

//import com.revrobotics.CANSparkMax;
// Spark MAX
//import com.sun.tools.classfile.StackMapTable_attribute.stack_map_frame;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Climber climber;
    public static BallIntake ballIntake;
    public static HatchIntake hatchIntake;
    public static BallLauncher ballLauncher;
    public static AnalogInput pressure;
    public static DifferentialDrive DriveSys; 

    Compressor compressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        compressor = new Compressor(0);
        compressor.setClosedLoopControl(true);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        driveTrain = new DriveTrain();
        climber = new Climber();
        ballIntake = new BallIntake();
        hatchIntake = new HatchIntake();
        ballLauncher = new BallLauncher();
        CANSparkMax m_frontLeft = new CANSparkMax(1, MotorType.kBrushless);
	    CANSparkMax m_rearLeft = new CANSparkMax(2, MotorType.kBrushless);
	    SpeedControllerGroup m_left = new SpeedControllerGroup(m_frontLeft, m_rearLeft);

	    CANSparkMax m_frontRight = new CANSparkMax(3, MotorType.kBrushless);
	    CANSparkMax m_rearRight = new CANSparkMax(4, MotorType.kBrushless);
	    SpeedControllerGroup m_right = new SpeedControllerGroup(m_frontRight, m_rearRight);
        DriveSys = new DifferentialDrive(m_left, m_right);
       

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
       
        
        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
      
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("getvalue", pressure.getValue());
        SmartDashboard.putNumber("volta", pressure.getVoltage());
        SmartDashboard.putNumber("getadvalue", pressure.getAverageValue());
        SmartDashboard.putNumber("getadvolta", pressure.getAverageVoltage());
        DriveSys.arcadeDrive(oi.driver.getY(),  oi.driver.getX());
        
    }
}
